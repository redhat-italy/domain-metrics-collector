// CHECKSTYLE:OFF
/**
 * Source code generated by Fluent Builders Generator
 * Do not modify this file
 * See generator home page at: http://code.google.com/p/fluent-builders-generator-eclipse-plugin/
 */

package com.redhat.it.customers.dmc.core.dto.configuration.builder;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import com.redhat.it.customers.dmc.core.constants.Constants;
import com.redhat.it.customers.dmc.core.dto.configuration.Configuration;

/**
 * The Class ConfigurationBuilder.
 * 
 * @author Andrea Battaglia
 */
public class ConfigurationBuilder extends
        ConfigurationBuilderBase<ConfigurationBuilder> {

    /**
     * Configuration.
     *
     * @return the configuration builder
     */
    public static ConfigurationBuilder configuration() {
        return new ConfigurationBuilder();
    }

    /**
     * Instantiates a new configuration builder.
     */
    public ConfigurationBuilder() {
        super(new Configuration());
    }

    /**
     * Builds the.
     *
     * @return the configuration
     */
    public Configuration build() {
        return getInstance();
    }
}

class ConfigurationBuilderBase<T extends ConfigurationBuilderBase<T>> {

    public static final String DEFAULT_HOST = "localhost";
    public static final int DEFAULT_PORT = 9999;
    public static final int DEFAULT_SCAN_INTERVAL = 120;
    private Configuration instance;

    protected ConfigurationBuilderBase(Configuration aInstance) {
        instance = aInstance;
    }

    protected Configuration getInstance() {
        return instance;
    }

    @SuppressWarnings("unchecked")
    public T withId(String aValue) {
        instance.setId(checkStringValueWithException(aValue));

        return (T) this;
    }

    @SuppressWarnings("unchecked")
    public T withHostname(String aValue) {
        instance.setHostname(checkStringValue(aValue) == null ? DEFAULT_HOST
                : aValue);

        return (T) this;
    }

    @SuppressWarnings("unchecked")
    public T withPort(Integer aValue) {
        int value = checkIntegerValue(aValue);
        instance.setPort(value == 0 ? DEFAULT_PORT : value);

        return (T) this;
    }

    @SuppressWarnings("unchecked")
    public T withUsername(String aValue) {
        instance.setUsername(checkStringValue(aValue));

        return (T) this;
    }

    @SuppressWarnings("unchecked")
    public T withPassword(String aValue) {
        instance.setPassword(checkStringValue(aValue));

        return (T) this;
    }

    @SuppressWarnings("unchecked")
    public T withRealm(String aValue) {
        instance.setRealm(checkStringValue(aValue));

        return (T) this;
    }

    @SuppressWarnings("unchecked")
    public T withRegexpHostname(String aValue) {
        instance.setRegexpHostname(checkStringValue(aValue));

        return (T) this;
    }

    @SuppressWarnings("unchecked")
    public T withRegexpServer(String aValue) {
        instance.setRegexpServer(checkStringValue(aValue));

        return (T) this;
    }

    @SuppressWarnings("unchecked")
    public T withApps(String aValue) {
        String value = checkStringValue(aValue);
        Set<String> appsSet = new HashSet<String>();
        if (value != null)
            appsSet.addAll(Arrays.asList(value
            //
                    .split(Constants.DEFAULT_SEPARATOR.getValue())));
        // .split(", *"));
        //
        instance.setApps(Collections.unmodifiableSet(appsSet));

        return (T) this;
    }

    @SuppressWarnings("unchecked")
    public T withScanInterval(Integer aValue) {
        int value = checkIntegerValue(aValue);
        instance.setScanInterval(value == 0 ? DEFAULT_SCAN_INTERVAL : value);

        return (T) this;
    }

    private static final int checkIntegerValue(Integer aValue) {
        if (aValue == null || aValue == 0)
            return 0;
        return aValue;
    }

    private static final String checkStringValue(String aValue) {
        if (aValue == null || aValue.equals(""))
            return null;
        return aValue;
    }

    private static final String checkStringValueWithException(String aValue) {
        if (aValue == null || aValue.equals(""))
            throw new IllegalArgumentException(
                    "null or empty values not admitted");
        return aValue;
    }

}
